from django.shortcuts import render, redirect
hello varshi 
yes
okok
if val3 < 18.5:
            res = "Underweight"
        elif 18.5 <= val3 < 25:
            res = "Normal weight"
        elif 25 <= val3 <= 29.9:
            res = "Overweight"
        elif 30 <= val3 <= 34.9:
            res = "Obesity Class 1"
        elif 35 <= val3 <= 39.9:
            res = "Obesity Class 2"
        elif val3 >= 40:
            res = "Obesity Class 3"
        else:
            res = "Invalid BMI"
        BMICalculation.objects.create(weight=weight, height=height, bmi_value=val3, gender=gender, category=res)
        return render(request, 'bmiresult.html', {'result': round(val3), 'age': age, 'gender': gender, 'category': res})
    return render(request, 'bmical.html')
@login_required(login_url='login')
def daily(request):#this fn is to determine the min requirements based on age&gender, use in compute fn
    age = request.session.get('age')
    gender = request.session.get('gender')
    DAILY_REQUIREMENTS = {
        'Female': {
            (4, 8):  {'Calories': 1200, 'Proteins': 19, 'Fats': 70, 'Sodium': 2300, 'Fiber': 25, 'Carbs': 260, 'Sugar': 50},
            (9, 13): {'Calories': 1600, 'Proteins': 34, 'Fats': 70, 'Sodium': 2300, 'Fiber': 26, 'Carbs': 290, 'Sugar': 50},
            (14, 18): {'Calories': 1800, 'Proteins': 46, 'Fats': 70, 'Sodium': 2300, 'Fiber': 26, 'Carbs': 300, 'Sugar': 50},
            (19, 30): {'Calories': 2000, 'Proteins': 46, 'Fats': 70, 'Sodium': 2300, 'Fiber': 28, 'Carbs': 310, 'Sugar': 50},
            (31, 50): {'Calories': 1800, 'Proteins': 46, 'Fats': 70, 'Sodium': 2300, 'Fiber': 28, 'Carbs': 300, 'Sugar': 50},
            (51, 70): {'Calories': 1600, 'Proteins': 46, 'Fats': 70, 'Sodium': 2300, 'Fiber': 28, 'Carbs': 260, 'Sugar': 50},
            (71, 100): {'Calories': 1500, 'Proteins': 46, 'Fats': 70, 'Sodium': 2300, 'Fiber': 28, 'Carbs': 250, 'Sugar': 50},
        },
        'Male': {
            (4, 8):  {'Calories': 1400, 'Proteins': 19, 'Fats': 70, 'Sodium': 2300, 'Fiber': 25, 'Carbs': 270, 'Sugar': 50},
            (9, 13): {'Calories': 1800, 'Proteins': 34, 'Fats': 70, 'Sodium': 2300, 'Fiber': 31, 'Carbs': 300, 'Sugar': 50},
            (14, 18): {'Calories': 2200, 'Proteins': 52, 'Fats': 70, 'Sodium': 2300, 'Fiber': 31, 'Carbs': 320, 'Sugar': 50},
            (19, 30): {'Calories': 2400, 'Proteins': 56, 'Fats': 70, 'Sodium': 2300, 'Fiber': 34, 'Carbs': 330, 'Sugar': 50},
            (31, 50): {'Calories': 2200, 'Proteins': 56, 'Fats': 70, 'Sodium': 2300, 'Fiber': 34, 'Carbs': 300, 'Sugar': 50},
            (51, 70): {'Calories': 2000, 'Proteins': 56, 'Fats': 70, 'Sodium': 2300, 'Fiber': 30, 'Carbs': 280, 'Sugar': 50},
            (71, 100): {'Calories': 1800, 'Proteins': 56, 'Fats': 70, 'Sodium': 2300, 'Fiber': 30, 'Carbs': 250, 'Sugar': 50},
        }
    }
    for age_range, requirements in DAILY_REQUIREMENTS.get(gender, {}).items():
        if age_range[0] <= age <= age_range[1]:
            return requirements
    return {}  

def load_nutrition_data():# this fn is to load the nutrition data of items and use in compute fn
    nutrition_data = {}
    nutition_items = NutritionInfo.objects.all()
    for item in nutition_items:
        nutrition_data[item.item_name.lower()] = {
            'Calories': item.calories,
            'Proteins': item.proteins,
            'Fats': item.fats,
            'Sodium': item.sodium,
            'Fiber': item.fiber,
            'Carbs': item.carbs,
            'Sugar': item.sugar,
            'UnitWeight': item.unit_weight
        }
    return nutrition_data

@login_required
def compute(request):#**** fn, to calculate req met or not, sum divide and compare
    if request.method == 'POST':
        items = request.POST.getlist('item[]')
        quantities = request.POST.getlist('quantity[]')
        nutrition_data = load_nutrition_data()
        requirements = daily(request)

        item_quantities = [(item.lower().strip(), quantity) for item, quantity in zip(items, quantities)]
        request.session['item_quantities'] = item_quantities

        if not requirements:
            print("Error1-not found")
            requirements = {'Calories': 0, 'Proteins': 0, 'Fats': 0, 'Sodium': 0, 'Fiber': 0, 'Carbs': 0, 'Sugar': 0}
        totals = {'Calories': 0, 'Proteins': 0, 'Fats': 0, 'Sodium': 0, 'Fiber': 0, 'Carbs': 0, 'Sugar': 0}
        item_details = []
        submission = UserSubmission.objects.create(user=request.user)
        for item, quantity in zip(items, quantities):
            item = item.lower().strip()
            try:
                quantity = int(quantity)
                if item in nutrition_data:
                    item_info = nutrition_data[item]
                    unit_weight = item_info['UnitWeight']
                    total_weight = quantity * unit_weight
                    for key in totals:
                        totals[key] += (item_info[key] * total_weight / 100)
                        totals[key] = round(totals[key], 2)
                    item_details.append((item, total_weight, item_info))
                    ItemEntry.objects.create(#to edit items entered by user in database
                        submission=submission,
                        item_name=item,
                        quantity=total_weight,
                        calories=item_info['Calories']*total_weight/100,
                        proteins=item_info['Proteins']*total_weight/100,
                        fats=item_info['Fats']*total_weight/100,
                        sodium=item_info['Sodium']*total_weight/100,
                        fiber=item_info['Fiber']*total_weight/100,
                        carbs=item_info['Carbs']*total_weight/100,
                        sugar=item_info['Sugar']*total_weight/100
                    )
            except ValueError:
                print("Error2-cant fetch")#print in console
         #comparing calculated nutrition with min req
        meets_requirements = {key: totals[key] >= requirements[key] for key in totals}
        request.session['totals'] = totals
        context = {
            'item_details': item_details,
            'totals': totals,
            'meets_requirements': meets_requirements,
            'requirement': requirements
        }
        return render(request,'inputsbase.html',context)

    return render(request,'score.html')
'''
Changes to be made: 
● Stylize few things
● add a pop up button in inputsbase.html stating you have not met these requirements
● Should update unitweight of each item
● check buttons
'''
@login_required
def suggester_view(request):
    if request.method == 'POST':
        selected_items = []
        for category in request.POST:
            if category.startswith('item_'):
                selected_item_name = request.POST[category]
                if selected_item_name:
                    item = NutritionInfo.objects.get(item_name=selected_item_name)
                    selected_items.append(item)

        return render(request, 'suggestresult.html', {'results': selected_items})

@login_required
def user_history(request):
    user_submissions = UserSubmission.objects.filter(user=request.user).prefetch_related('items')
    
    context = {
        'submissions': user_submissions,
    }
    return render(request, 'user_history.html', context)
@login_required
def moreinfo(request):
    return render(request,'optimzerinfo.html')